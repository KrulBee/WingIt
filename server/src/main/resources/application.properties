spring.application.name=server

# Server port configuration - Render uses dynamic ports
server.port=${PORT:8080}

# Database configuration - supports both local MySQL and production PostgreSQL
spring.datasource.url=${DATABASE_URL:jdbc:mysql://localhost:3306/db}
spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:}
spring.datasource.driver-class-name=${DB_DRIVER:com.mysql.cj.jdbc.Driver}
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.database-platform=${DB_DIALECT:org.hibernate.dialect.MySQLDialect}
jwt.secret=${JWT_SECRET:default-jwt-secret-for-development-only}
jwt.expiration=360000000

# File upload configuration for video support
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=200MB
spring.servlet.multipart.enabled=true

# Server timeout configuration for large uploads
server.tomcat.connection-timeout=300000
server.tomcat.max-swallow-size=50MB

# Cloudinary configuration - use environment variables for security
cloudinary.cloud-name=${CLOUDINARY_CLOUD_NAME:default-cloud-name}
cloudinary.api-key=${CLOUDINARY_API_KEY:default-api-key}
cloudinary.api-secret=${CLOUDINARY_API_SECRET:default-api-secret}

# Google OAuth2 configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:default-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:default-client-secret}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${OAUTH2_REDIRECT_URI:${BACKEND_URL:http://localhost:8080}/login/oauth2/code/google}
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# Email configuration for password reset
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${EMAIL_USERNAME:test@example.com}
spring.mail.password=${EMAIL_PASSWORD:test-password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
spring.mail.default-encoding=UTF-8

# App configuration
app.base-url=${FRONTEND_URL:http://localhost:3000}
app.name=WingIt

# Profanity Detection AI Server Configuration
profanity.detection.url=${PROFANITY_DETECTION_URL:http://localhost:5000}
profanity.detection.enabled=true
profanity.detection.timeout=5000
