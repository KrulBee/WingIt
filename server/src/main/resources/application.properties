spring.application.name=server

# Server port configuration - Render uses dynamic ports
server.port=${PORT:8080}

# Database configuration - supports both local MySQL and production PostgreSQL
spring.datasource.url=${DATABASE_URL:jdbc:mysql://localhost:3306/db}
spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:}
spring.datasource.driver-class-name=${DB_DRIVER:com.mysql.cj.jdbc.Driver}
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.database-platform=${DB_DIALECT:org.hibernate.dialect.MySQLDialect}
jwt.secret=${JWT_SECRET:default-jwt-secret-for-development-only}
jwt.expiration=360000000

# File upload configuration for video support
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=200MB
spring.servlet.multipart.enabled=true

# Server timeout configuration for large uploads
server.tomcat.connection-timeout=300000
server.tomcat.max-swallow-size=50MB

# Cloudinary configuration - use environment variables for security
cloudinary.cloud-name=${CLOUDINARY_CLOUD_NAME:default-cloud-name}
cloudinary.api-key=${CLOUDINARY_API_KEY:default-api-key}
cloudinary.api-secret=${CLOUDINARY_API_SECRET:default-api-secret}

# Google OAuth2 configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:default-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:default-client-secret}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${OAUTH2_REDIRECT_URI:${BACKEND_URL:http://localhost:8080}/login/oauth2/code/google}
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# Email configuration for password reset
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${EMAIL_USERNAME:test@example.com}
spring.mail.password=${EMAIL_PASSWORD:test-password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
spring.mail.default-encoding=UTF-8

# App configuration
app.base-url=${FRONTEND_URL:http://localhost:3000}
app.name=WingIt

# Profanity Detection AI Server Configuration
# Using local AI service for development and testing
profanity.detection.url=${PROFANITY_DETECTION_URL:http://localhost:5000}
profanity.detection.enabled=true
profanity.detection.timeout=30000

# Async Thread Pool Configuration for Social Media Performance
# Main task executor configuration (Spring Boot standard properties)
spring.task.execution.pool.core-size=5
spring.task.execution.pool.max-size=20
spring.task.execution.pool.queue-capacity=200
spring.task.execution.pool.keep-alive=60s
spring.task.execution.thread-name-prefix=WingIt-Main-

# Enable scheduled tasks for analytics and background processing
spring.task.scheduling.pool.size=3
spring.task.scheduling.thread-name-prefix=WingIt-Scheduler-

# Custom async executor settings are configured in AsyncConfig.java
# This ensures optimal performance for social media operations:
# - Main: 5-20 threads for general operations
# - Notifications: 3-10 threads, 500 queue capacity
# - Email: 2-5 threads, 100 queue capacity  
# - Media: 3-8 threads, 50 queue capacity for uploads/processing
# - Analytics: 1-3 threads, 1000 queue capacity for background analytics
# - WebSocket: 4-15 threads, 300 queue capacity for real-time features
# - Background: 2-4 threads, 2000 queue capacity for heavy operations

# Thread pool monitoring and metrics (optional)
management.endpoints.web.exposure.include=health,metrics,threaddump
management.endpoint.health.show-details=when-authorized
management.metrics.enable.executor=true
